Breve riepilogo
Questa PR aggiunge un pannello studenti per la lesson‚Äëmode con pulsanti rapidi per i voti (scala 4‚Äì10), scorciatoie emoji per il comportamento e una modalit√† semplice per aggiungere note. Le valutazioni vengono salvate utilizzando l‚ÄôAPI di persistenza se disponibile (InClasseDataManager.addEvaluationToInstance); se l‚ÄôAPI non √® presente viene eseguito un fallback che aggiorna lessonInstance.evaluations e persiste l‚Äôistanza.

Cosa contiene
- Nuovi file:
  - src/js/in-classe/student-panel.js ‚Äî implementazione del pannello e API di integrazione (window.renderStudentPanel(...)).
  - src/css/in-classe/student-panel.css ‚Äî stili mobile‚Äëfirst per il pannello.
- Metodi dati (presente nella branch di integrazione / feat/data-evaluation):
  - InClasseDataManager.prototype.addEvaluationToInstance(...)
  - InClasseDataManager.prototype.computeAnalytics(...)

Comportamento principale
- Voti rapidi: pulsanti 4..10 per assegnare un voto con un click.
- Emoji comportamento: üòä, üòê, üòü come scorciatoie rapida.
- Sheet dettagliato: tasto funzione apre un sheet/modal per note e valutazioni avanzate.
- Salvataggio: prova prima addEvaluationToInstance; se non disponibile fa fallback su updateLessonInstance.
- Evento: dopo ogni salvataggio viene emesso document.dispatchEvent('evaluationUpdated', { detail: { lessonInstanceId, studentId, evaluation } }).

Istruzioni di integrazione (copia/incolla)
1. Includi i file (dopo i moduli in-classe esistenti):
   - <link rel="stylesheet" href="src/css/in-classe/student-panel.css">
   - <script src="src/js/in-classe/student-panel.js"></script>
2. Aggiungi un contenitore nella UI della lesson mode:
   - <div id="student-panel-container"></div>
3. Dopo avere la lessonInstance (es. lessonInstance.id) chiama:
   - window.renderStudentPanel('student-panel-container', lessonInstance)

Come testare (smoke test)
1. In console (pagina dev):
   - const dm = new InClasseDataManager(); await dm.init();
   - const id = localStorage.getItem('currentLessonInstanceId') || '<id-prova>'; 
2. Testare DataManager (se i metodi sono presenti):
   - await dm.addEvaluationToInstance(id, 'stu_123', { type:'grade', value:8, activityType:'T', evaluatorId:'t_1' });
   - await dm.addEvaluationToInstance(id, 'stu_123', { type:'behavior', value:'üòä', evaluatorId:'t_1' });
   - const analytics = await dm.computeAnalytics(id); console.log(analytics);
3. Test UI:
   - window.renderStudentPanel('student-panel-container', lessonInstance)
   - Clic sui pulsanti 4‚Äì10 / emoji; verificare che venga dispatchato l‚Äôevento evaluationUpdated:
     - document.addEventListener('evaluationUpdated', e => console.log(e.detail))
   - Verificare in IndexedDB ‚Üí INSTANCES che lessonInstance abbia .evaluations aggiornato.

Checklist (da spuntare prima del merge)
- [ ] I file UI sono aggiunti e formattati correttamente.
- [ ] I metodi data (addEvaluationToInstance, computeAnalytics) sono presenti su feat/schedule-integration.
- [ ] Smoke test end‚Äëto‚Äëend passato (UI + persistenza).
- [ ] Accessibility check di base (contrasto, dimensione touch, labels).
- [ ] Tests placeholder / note per unit e integrazione (da aggiungere in issue separata).
- [ ] Rimuovere prefisso [WIP] e marcare PR come pronta per la review.

Note e step successivi
- Se vuoi possiamo spostare il salvataggio completamente su InClasseDataManager.addEvaluationToInstance e rimuovere il fallback dal pannello (consigliato per coerenza).
- Possibili miglioramenti: storico valutazioni per studente nello sheet, micro‚Äëgrafici analytics (computeAnalytics), test automatici e miglior UI/UX del detail sheet.
- Questa PR ha come target la branch feat/schedule-integration: assicurarsi che feat/data-evaluation sia mergeata su feat/schedule-integration prima di segnare questa PR come pronta (o usare il pulsante ‚ÄúUpdate branch‚Äù nella PR per sincronizzare).

Assegna reviewer: @antoniocorsano-boop

(Updated by Copilot on user request)